---
title: "QD shiny"
author: ""
output: 
  html_document:
self_contained: yes
runtime: shiny
---

```{r, echo = F, message = F, warning = F}
knitr::opts_chunk$set(echo = F, message = F, warning = F)

library(tidyverse)
library(randomForest)
library(shiny)

load(file = 'data/FlowStatus.rf.Rdata')
```

```{r}
column(12, 
       column(4, 
              selectInput('aqin', 'AquaticInverts:', choices = c(0, 1), selected = 1)
              ), 
       column(4, 
              selectInput('prin', 'PerennialIndicators:', choices = c(0, 1), selected = 0)
              ), 
       column(4, 
              selectInput('plnt', 'Plants:', choices = c(0, 1), selected = 1)
              )
)
column(12, 
       column(4, 
              numericInput('slop', 'PctSlope:', value = 1, min = 0, max = 100, step = 5)
              ),
       column(4, 
              selectInput('wtdr', 'WetDry:', choices = c(0, 1), selected = 1)
              )
       )
```

```{r}
nwplo <- reactive({
  
  # inputs
  aqin <- as.numeric(input$prin)
  prin <- as.numeric(input$prin)
  plnt <- as.numeric(input$plnt)
  slop <- as.numeric(input$slop)
  wtdr <- as.numeric(input$wtdr)
  
  # to predict
  newdf <- data.frame(
    AquaticInverts = aqin,
    PerennialIndicators = prin,
    Plants = plnt,
    PctSlope = slop,
    WetDry = wtdr
    )
  
  # predicted data
  pred.df <- as.data.frame(predict(FlowStatus.rf, newdata = newdf, type="prob")) %>%
    gather('Class', 'Probability') %>% 
    mutate(
      Class = factor(Class, levels=c("E","I","P"), labels=c("Ephemeral","Intermittent", "Perennial"))
      )
  
  # plot
  p <- ggplot(data = pred.df, aes(x = Class, y = Probability, fill = Class))+
    geom_bar(stat = "identity")+
    geom_bar(data = pred.df[which.max(pred.df$Probability),], stat = "identity", color = "black", size=2)+
    scale_x_discrete(name = "")+
    ggtitle(paste("Your site is likely:", pred.df$Class[which.max(pred.df$Probability)] ))+
    scale_fill_manual(guide = F, values = c("#fdae61", "#abd9e9", "#2c7bb6")) + 
    theme_bw(base_family = 'serif', base_size = 16)
  
  return(p)
  
})
```

```{r}
renderPlot({nwplo()}, height = 500, width = 500)
```

